

##### Required softwares/packages #####
# snpEff

###### Find synonymous and non-synonymous variant sites ######

# install snpeff if needed
java -jar snpEff.jar download <reference-genome>
# annotate the vcf with synonymous and non-synonymous sites
java -jar snpEff.jar -v <reference-genome> input.vcf > annotated.vcf

# filter 
bcftools view -i 'INFO/ANN[*] ~ "synonymous_variant"' annotated.vcf > synonymous_variants.vcf
bcftools view -i 'INFO/ANN[*] ~ "missense_variant"' annotated.vcf > nonsynonymous_variants.vcf

### Optional: build your own reference database ###

# first, go to snpEff.config
nano snpEff.config
  # add to Non-standard database section, f.e.
   # 	"# Arabidopsis.lyrata.NT1.genome
   #	alyrata.NT1.genome : Arabidopsis_lyrata_NT1"

# next, make a folder in /snpEff/data/<yourown-reference-genome>
# put your fasta sequence, renamed to sequences.fasta
# put your annotation file, renamed genes.gff
# put your cds.fasta file, generated by: 
bedtools getfasta -fi reference.fa -bed annotations.gff -fo cds.fa
	# or
gffread annotations.gff -g reference.fa -x cds.fa

# put your protein.fasta, generated with transeq or with this custom Python script
	
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

with open("cds.fa") as cds_file, open("protein.fa", "w") as protein_file:
    for record in SeqIO.parse(cds_file, "fasta"):
        # Translate CDS sequence to protein
        protein_seq = record.seq.translate(to_stop=True)
        protein_record = SeqRecord(protein_seq, id=record.id, description="translated protein")
        SeqIO.write(protein_record, protein_file, "fasta")
	
# finally, build the reference database
java -jar snpEff.jar build -gff3 -v <yourown-reference-genome> -noCheckCds -noCheckProtein
	# the last flags are important in case it throws error about not able to "compare protein sequences"
 	# here my <yourown-reference-genome> is alyrata.NT1 for example

#####

