
######################################## PART 1: in Bash ########################################
#################################################################################################

## Required input
# VCF unfiltered, contains all sites including variants, non-variants, and even missing data
# annotation file (gtf or gff format)
# reference genome fasta file
# list of different gene groups of interest
# population information

## Required Tools

# For pi calculation: Python 3, conda, and pixy (https://pixy.readthedocs.io)
# For annotating degeneracy: Python 3, degenotate (https://github.com/harvardinformatics/degenotate)
# In general: BCFTools, VCFTools, HTSlib, SAMtools

########## Calculate pi using pixy ##########

pixy --stats pi fst dxy \
--vcf input.vcf.gz \ 
--populations popinfo.txt \
--window_size 1 # to calculate pi for every single position
--output_folder /path/to/output/directory

# popinfo.txt has two columns sample name (as in VCF) and population name
  # f.e. Sample1 popA
  #      Sample2 popA
  #      Sample3 popB

# Since this takes quite some time, recommended to do it per chromosome and concantenate them

## Output should have, among other things,
# pop  # chromosome   # position 1   # position 2    # pi value
# column 5 (avg_pi) may have NA, change NA to 0 by 
  # awk '{if ($5 == "NA") $5 = 0; print}' OFS="\t" pixy_pi.txt > pixy_pi_chr_1.txt

########## Annotate degeneracy using degenotate ##########
python degenotate.py -a reference_genome_annotation.gtf -g reference_genome.fasta -o /path/to/output/directory
## Output should have, among other things
  # chromosome  # position 1  # position 2  # geneID  # degeneracy_code (either 0,1,2,3,or 4)

# For the information, the headers in order are, we need only column 1 - 5 
# chromosome      window_pos_1    window_pos_2    geneID  degeneracy      ref_nucleotide  ref_aminoacid   mutation_summary


########## Combine degeneracy and pi into one table ##########

PI=/path/to/pixy_pi_all_chromosomes.bed
DEG=/path/to/degeneracy-all-sites.bed

bedtools intersect -a $PI -b $DEG -wa -wb > pi_degeneracy_table.bed

# This final combined file has 
# chromosome_.. position1 position2 pi chromosome_... position1 position2 geneID degeneneracy_code


## Divide them into zero fold and four fold

awk -F'\t' '$9 == 0' input.bed > output_0fold.bed
awk -F'\t' '$9 == 4' input.bed > output_4fold.bed

# Calculate mean pi PER GENE (using all positions of a gene)
awk -F'\t' '{sum[$8] += $4; count[$8]++} END {for (gene in sum) print gene, sum[gene] / count[gene]}' OFS='\t' input_file > mean_pi_per_gene.txt




######################################## PART 2: in R ########################################
##############################################################################################
## Required packages: ggplot2, dplyr, ggpubr 

#### Load the input files 
# Zero fold (pi N) 
zero = read.table("/Users/nhutran/Downloads/mean_pi_per_gene_gtf_0fold.bed",header = F, sep = "\t", stringsAsFactors = FALSE)
# Four fold (pi S)
four = read.table("/Users/nhutran/Downloads/mean_pi_per_gene_gtf_4fold.bed",header = F, sep = "\t", stringsAsFactors = FALSE)

#### Load gene groups
# Here my gene groups are so called "high Vd", "high Va", etc
newhighD = read.csv("/path/to/high_Vd_genes.csv", header = T)
newhighA = read.csv("/path/to/high_Va_genes.csv", header = T)
newhighR = read.csv("/path/to/high_Vr_genes.csv", header = T)
intermediate = read.csv("/path/to/intermediate_genes.csv", header = T)
  # Each of these files has a column of genes of interest

#### Subset zero fold and four fold 

zero_A = subset(zero, zero$V1 %in% newhighA$Gene)
four_A = subset(four, four$V1 %in% newhighA$Gene)
A04 = merge(zero_A, four_A, by = "Gene")
colnames(A04) = c("Gene","pN","pS")

zero_D = subset(zero, zero$V1 %in% newhighD$Gene)
four_D = subset(four, four$V1 %in% newhighD$Gene)
D04 = merge(zero_D, four_D, by = "Gene")
colnames(D04) = c("Gene","pN","pS")

zero_R = subset(zero, zero$V1 %in% newhighR$Gene)
four_R = subset(four, four$V1 %in% newhighR$Gene)
R04 = merge(zero_R, four_R, by = "Gene")
colnames(R04) = c("Gene","pN","pS")

zero_i = subset(zero, zero$V1 %in% intermediate$Gene)
four_i = subset(four, four$V1 %in% intermediate$Gene)
i04 = merge(zero_i, four_i, by = "Gene")
colnames(i04) = c("Gene","pN","pS")

# Finally random sampling 4000 genes to see if our data differs from random or not
allgenes = rbind(newhighA, newhighD, newhighR, intermediate)
set.seed(40)
samplegenes = allgenes[sample(nrow(allgenes), 4000),]

zero_rand = subset(zero, zero$V1 %in% samplegenes)
four_rand = subset(four, four$V1 %in% samplegenes)
ran04 = merge(zero_rand, four_rand, by = "V1")
colnames(ran04) = c("Gene","pN","pS")

# Save these files
write.table(A04, file = "piN_pS_table_highA_genes.txt", sep = "\t", row.names = FALSE, quote = F, col.names = T)
write.table(D04, file = "piN_pS_table_highD_genes.txt", sep = "\t", row.names = FALSE, quote = F, col.names = T)
write.table(i04, file = "piN_pS_table_iVg_genes.txt", sep = "\t", row.names = FALSE, quote = F, col.names = T)
write.table(R04, file = "piN_pS_table_highR_genes.txt", sep = "\t", row.names = FALSE, quote = F, col.names = T)
write.table(ran04, file = "piN_pS_table_random3k_genes.txt", sep = "\t", row.names = FALSE, quote = F, col.names = T)

## For each of these gene groups, we can calculate mean of pN and mean of pS and divide mean pN by mean pS
## This is our "Original" piN/pS ratio
## However this is only one value, to ensure the robustness, we sampled 1000 times with replacement
## This results in 1000 bootstrapped piN/piS values

####### Beginning of main script to bootstrap 1000 times #######
# Set the directory containing your files
# This is the path of where the piN_piS_table above were generated
file_directory = "/path/to/input/files" 

# List all files of interest in the directory
group_files = list.files(path = file_directory, pattern = "piN_piS_table_*.txt", full.names = TRUE)

# Print the files to verify
print(group_files)

# Set bootstrap iterations
bootstrap_iterations = 1000
# Function to calculate mean pN/pS and bootstrap
process_group = function(file) {
  # Read the group file
  group_data = read.table(file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
  
  # Ensure columns pN and pS are numeric
  group_data$pN = as.numeric(group_data$pN)
  group_data$pS = as.numeric(group_data$pS)
  group_data = group_data[!is.na(as.numeric(group_data$pN)) & !is.na(as.numeric(group_data$pS)),]
  # Replace zeros in pS with a small constant (e.g., 0.001) to avoid division by zero
  group_data$pS[group_data$pS == 0] <- 0.001
  print(head(group_data))  # Show the first few rows of the data
  print(str(group_data))   # Inspect the structure and data types of the columns
  # Calculate original mean pN, pS, and ratio
  mean_pN = mean(group_data$pN, na.rm = TRUE)
  mean_pS = mean(group_data$pS, na.rm = TRUE)
  original_ratio = mean_pN / mean_pS
  
  # Bootstrap to calculate mean pN, pS, and pN/pS ratio
  bootstrap_ratios = replicate(bootstrap_iterations, {
    sampled_data = group_data[sample(nrow(group_data), replace = TRUE), ]
    bootstrap_mean_pN = mean(sampled_data$pN, na.rm = TRUE)
    bootstrap_mean_pS = mean(sampled_data$pS, na.rm = TRUE)
    if (bootstrap_mean_pS > 0) {
      bootstrap_mean_pN / bootstrap_mean_pS
    } else {
      NA
    }
  })
  
  # Return results as a list
  list(
    group_name = gsub("\\.txt$", "", basename(file)),
    original_ratio = original_ratio,
    bootstrap_ratios = bootstrap_ratios
  )
}

# Process each group and store results
bootstrap_results = lapply(group_files, process_group)


# Save bootstrap ratios for each group into a combined table
bootstrap_ratios_table = do.call(rbind, lapply(bootstrap_results, function(res) {
  data.frame(
    Group = res$group_name,
    Ratio = c(res$original_ratio, res$bootstrap_ratios),
    Type = c("Original", rep("Bootstrap", bootstrap_iterations))
  )
}))

# Extract the relevant part from the Group column
# bootstrap_ratios_table$Group = sub(".*_table_(.*?)_genes.*", "\\1", bootstrap_ratios_table$Group)

bootstrap_ratios_file="piN_pS_ratios_bootstrap1k_allgroups.csv"
# Save the combined bootstrap ratios table
write.csv(bootstrap_ratios_table, bootstrap_ratios_file, row.names = FALSE)

# Calculate significance between groups 
get_p_bootstrap_0 = function(x, y, data) {
  g1_b = data[data$Group == x & data$Type == "Bootstrap", "Ratio"]
  g2_b = data[data$Group == y & data$Type == "Bootstrap", "Ratio"]
  diff = g1_b - g2_b
  p = mean(diff < 0, na.rm = TRUE)
  p2 = 2 * min(p, 1 - p)
  return(p2)
}

# Generate pairwise significance results
group_names = unique(bootstrap_ratios_table$Group)
significance_results = expand.grid(Group1 = group_names, Group2 = group_names) %>%
  filter(Group1 != Group2) %>%
  rowwise() %>%
  mutate(Significance = get_p_bootstrap_0(Group1, Group2, bootstrap_ratios_table))

# Save significance results
significance_results_file="piN_pS_ratios_bootstrap1k_allgroups_pvalues_betweenGroups.csv"
write.csv(significance_results, significance_results_file, row.names = FALSE)


# Output message
cat("Bootstrap analysis complete.\n")
cat("Bootstrap ratios saved to:", bootstrap_ratios_file, "\n")
cat("Significance results saved to:", significance_results_file, "\n")

####### End of main script to bootstrap 1000 times #######


### Plot the results ###
# Goal: box plot with original data point presented in each group

# Load ggplot2 library
library(ggplot2)

# Load the bootstrap ratios table
bootstrap_ratios_table = read.csv(bootstrap_ratios_file)
bootstrap_ratios_table$Group = as.factor(bootstrap_ratios_table$Group)

# Create the boxplot
# add original ratio point

# Create the boxplot
ggplot(bootstrap_ratios_table, aes(x = Group, y = Ratio, fill = Group)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.7, color = "grey30", size = 0.5) +  # Boxplot
  geom_point(data = subset(bootstrap_ratios_table, Type == "Original"), 
             aes(x = Group, y = Ratio), 
             color = "grey2", size = 2, alpha = 0.8) +  # Add Original points
  labs(
    title = "Bootstrap Ratios of pN/pS by Group",
    x = "Gene Groups",
    y = "pN/pS Ratio"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    axis.text.x = element_text(angle = 0, hjust = 1, size = 12),
    axis.text.y = element_text(size = 12),
    legend.position = "none"
  ) +
  scale_y_continuous(
    breaks = seq(0, 1, by = 0.05),  # Define custom breaks from 0 to 1 with 0.1 intervals
    limits = c(0.2, 0.5)  # Optional: Set limits for the y-axis
  ) +
  #scale_fill_manual(values = c(...)) # add custom palettes 
  scale_fill_brewer(palette = "Pastel1") # or use colour brewer



#############################################################################################
###################################### NOTES and TIPS #######################################
 

############## NOTES on installing pixy ##############
## Installation
# Set up environment
mkdir ~/pixy_env
cd ~/pixy_env

# Create a virtual environment
python3 -m venv pixy_venv

# Activate the virtual environment
source pixy_venv/bin/activate

pip install pixy
pixy --version 

# Activate it anew by 
source ~/pixy_env/pixy_venv/bin/activate

# Then run simply by
pixy --stats pi fst dxy \
--vcf input.vcf.gz \
--populations popinfo.txt \
--bed_file genes.bed


############## NOTES on installing degenotate ##############
## Similarly as above, set up an environment for degenotate 
git clone https://github.com/harvardinformatics/degenotate.git
cd degenotate
# check and install all dependencies
# Activate environment and run the degenotate.py script


############## To generate scripts for all chromosomes at once #############

# Save the follow script to script_generator.sh, for example
# chmod +x script_generator.sh and bash script_generator.sh to excute it

#### Beginning of the script_generator.sh ####
#!/bin/bash

# Directory to store the generated scripts
OUTPUT_DIR="./chromosome_scripts"
mkdir -p $OUTPUT_DIR

# Chromosome list for example
CHROMOSOMES=("scaffold_1" "scaffold_2" "scaffold_3" "scaffold_4" "scaffold_5" "scaffold_6" "scaffold_7" "scaffold_8")

# Base VCF file
VCF="/path/to/input.vcf.gz"

# Loop through each chromosome and create a script
for CHR in "${CHROMOSOMES[@]}"; do
    SCRIPT_NAME="$OUTPUT_DIR/run_pixy_${CHR}.sh"

    cat <<EOL > $SCRIPT_NAME
#!/bin/bash
#SBATCH --nodes=1
#SBATCH --time=400:00:00
#SBATCH --cpus-per-task=16
#SBATCH --mem=16gb
#SBATCH --account=...
#SBATCH --error=/path/${CHR}_boot.%J.err
#SBATCH --output=/path/${CHR}_boot.%J.out

cd /path/to/pixy_venv
source bin/activate 

# Set working directory
cd ...

# Run pixy for $CHR
pixy --vcf $VCF --populations populations.txt --chromosomes $CHR --output_folder pixy_${CHR}_results --stats pi --bypass_invariant_check yes --window_size 10
EOL

    # Make the script executable
    chmod +x $SCRIPT_NAME
done

echo "Scripts have been generated in $OUTPUT_DIR"

#### End of the script_generator.sh ####

######################################## THE END ########################################
############################### Keep calm and good luck! ################################

