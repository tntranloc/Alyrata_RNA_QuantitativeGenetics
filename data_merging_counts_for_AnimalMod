########################## My context and aim ############################
I have 133 samples, each has multiple "measurement", looking like this for example, for 90900_counts.txt file
gene:Al_scaffold_0001_1000	26
gene:Al_scaffold_0001_1004	137
gene:Al_scaffold_0001_1015	18037
gene:Al_scaffold_0001_1024	8
gene:Al_scaffold_0001_1030	51
gene:Al_scaffold_0001_1039	5
gene:scaffold_0001_1041	0
gene:scaffold_0001_1044	811

#I have accordingly to 133 samples, 133 txt files named 90901_counts.txt, 90902_counts.txt, .... and so on. 
#I need to remove the last 5 rows of every txt file because they are just some lines describing some information. 

#I want to write a code to combine all in a matrix
#So that I have the row names as "90900", "90901",... and so on. 
  #These are actually the part before the "_counts" of the text file name. So 90900_counts.txt would give "90900". 

#Then the column names are going to be 001_1000, 001_1004 and so on. 
  #These are the part after the "scaffold_". Remove whatever before that. 
  
#The value of each cell will be 26, 137, 18037, 8, ... and so on. 

#In the end I want a matrix, for example, 10 "*_counts.txt" files, a matrix of 10 rows (90901, 90902,...), and 8 columns (0001_1000, 0001_1004,....)


##########################USING R############################

#set directory 
setwd("/Users/nhutran/Downloads/counts")
# first, get a list of all the file names in the directory
files = list.files(pattern = "*_counts.txt")

# extract the sample names and scaffold IDs
samples = gsub("_counts.txt", "", files)
genes = gsub(".*scaffold_(.*)\t.*", "\\1", readLines(files[1]))[-(1:5)]

# initialize a matrix to hold the data
data_matrix = matrix(nrow = length(samples), ncol = length(genes),
                      dimnames = list(samples, genes))

# loop through each file and populate the matrix
for (i in seq_along(files)) {
  file_lines = readLines(files[i])
  values = as.numeric(gsub(".*\t", "", file_lines[-(1:5)]))
  data_matrix[i,] = values
}

# convert to a data frame if desired
data_frame <- as.data.frame(data_matrix)




##########################USING Python############################
  ###### I personally recommend it, due to the speed of processing 
  ###### the only thing is R can save RDS file which is then faster to load in R than large csv
  ###### but your choice
  
  
import os
import re
import numpy as np
import pandas as pd


# set directory
dir_path = '/Users/nhutran/Downloads/counts'

# get list of all file names in directory
files = [f for f in os.listdir(dir_path) if f.endswith('_counts.txt')]

# extract sample names and scaffold IDs
samples = [re.sub('_counts.txt', '', f) for f in files]
with open(os.path.join(dir_path, files[0]), 'r') as f:
    genes = [re.sub('.*scaffold_(.*)\t.*', '\\1', line).strip()
                for line in f.readlines()[:-5]]
genes = [f' {s}' for s in genes]

# initialize matrix to hold data
data_matrix = np.zeros((len(samples), len(genes)))

# loop through each file and populate matrix
for i, f in enumerate(files):
    with open(os.path.join(dir_path, f), 'r') as f:
        values = [float(line.split('\t')[1].strip())
                  for line in f.readlines()[:-5]]
    data_matrix[i,:] = values

# convert to pandas dataframe if desired
data_frame = pd.DataFrame(data_matrix, index=samples, columns=genes)


###In my case I process further with Python to merge Family  info

data_frame['ind'] = data_frame.index #get rownames to become a column

#move last column to first
temp_cols=data_frame.columns.tolist()
new_cols=temp_cols[-1:] + temp_cols[:-1]
data_frame=data_frame[new_cols]
print(data_frame)

#load fam info
fam = pd.read_csv("/Users/nhutran/Downloads/fam_membersAll.csv")

  #Fam has 4 columns: SampleName (same as "ind"), Family, Dam, Sire
fam.rename(columns ={'SampleName':'ind'}, inplace = True)

#check that "ind" of fam and data_frame have the same "types"
fam.dtypes

data_frame = data_frame.astype({'ind':'int'}) ##in this case, fam's "ind" is integer, but data_frame's "ind" is float, so I change the latter to int

merge = pd.merge(data_frame, fam, on = "ind") ##merge 2 dfs using "ind" column

#save final result
merge.to_csv("/Users/nhutran/Downloads/MT_dataset_for_animalMod_merged_allgenes_andFAM.csv", index=False)

